// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package statistic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatisticServiceClient is the client API for StatisticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticServiceClient interface {
	DealData(ctx context.Context, opts ...grpc.CallOption) (StatisticService_DealDataClient, error)
}

type statisticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticServiceClient(cc grpc.ClientConnInterface) StatisticServiceClient {
	return &statisticServiceClient{cc}
}

func (c *statisticServiceClient) DealData(ctx context.Context, opts ...grpc.CallOption) (StatisticService_DealDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &StatisticService_ServiceDesc.Streams[0], "/proto.StatisticService/DealData", opts...)
	if err != nil {
		return nil, err
	}
	x := &statisticServiceDealDataClient{stream}
	return x, nil
}

type StatisticService_DealDataClient interface {
	Send(*StreamRequest) error
	CloseAndRecv() (*StreamResponse, error)
	grpc.ClientStream
}

type statisticServiceDealDataClient struct {
	grpc.ClientStream
}

func (x *statisticServiceDealDataClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *statisticServiceDealDataClient) CloseAndRecv() (*StreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatisticServiceServer is the server API for StatisticService service.
// All implementations must embed UnimplementedStatisticServiceServer
// for forward compatibility
type StatisticServiceServer interface {
	DealData(StatisticService_DealDataServer) error
	mustEmbedUnimplementedStatisticServiceServer()
}

// UnimplementedStatisticServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatisticServiceServer struct {
}

func (UnimplementedStatisticServiceServer) DealData(StatisticService_DealDataServer) error {
	return status.Errorf(codes.Unimplemented, "method DealData not implemented")
}
func (UnimplementedStatisticServiceServer) mustEmbedUnimplementedStatisticServiceServer() {}

// UnsafeStatisticServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticServiceServer will
// result in compilation errors.
type UnsafeStatisticServiceServer interface {
	mustEmbedUnimplementedStatisticServiceServer()
}

func RegisterStatisticServiceServer(s grpc.ServiceRegistrar, srv StatisticServiceServer) {
	s.RegisterService(&StatisticService_ServiceDesc, srv)
}

func _StatisticService_DealData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StatisticServiceServer).DealData(&statisticServiceDealDataServer{stream})
}

type StatisticService_DealDataServer interface {
	SendAndClose(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type statisticServiceDealDataServer struct {
	grpc.ServerStream
}

func (x *statisticServiceDealDataServer) SendAndClose(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *statisticServiceDealDataServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatisticService_ServiceDesc is the grpc.ServiceDesc for StatisticService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatisticService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StatisticService",
	HandlerType: (*StatisticServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DealData",
			Handler:       _StatisticService_DealData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "statistics.proto",
}
